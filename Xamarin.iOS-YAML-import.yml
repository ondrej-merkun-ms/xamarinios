variables:
  system.debug: 'false'
  MOBILECENTER_OUTPUT_DIRECTORY: $(Build.ArtifactStagingDirectory)/build
  MOBILECENTER_BRANCH: release
  MOBILECENTER_BUILD_ID: $(Build.BuildNumber)
  MOBILECENTER_SOURCE_DIRECTORY: $(Build.Repository.LocalPath)
  MOBILECENTER_TRIGGER: manual
  APPCENTER_OUTPUT_DIRECTORY: $(Build.ArtifactStagingDirectory)/build
  APPCENTER_BRANCH: release
  APPCENTER_BUILD_ID: $(Build.BuildNumber)
  APPCENTER_SOURCE_DIRECTORY: $(Build.Repository.LocalPath)
  APPCENTER_TRIGGER: manual
  artifactVersioning.build.format: buildId
  buildScripts.toolset: '{}'
  MD_APPLE_SDK_ROOT: /Applications/Xcode_13.2.1.app
  P12Filename: Akvelon-Iphone-Distribution-2022-12-31.p12
  MobileProvisionFilename: AppCenter_Akvelon_DRI_Team_Test.mobileprovision
  AppExtensionProvisionSecureFiles: '[]'
  MOBILECENTER_XAMARIN_PROJECT: XamariniOS.sln
  MOBILECENTER_XAMARIN_CONFIGURATION: Release
  APPCENTER_XAMARIN_PROJECT: XamariniOS.sln
  APPCENTER_XAMARIN_CONFIGURATION: Release
  sonoma.tags: 'xamarin,signed,msbuild,xcode'
name: $(Build.BuildId)
resources:
  repositories:
    - repository: self
      type: git
      ref: release
jobs:
  - job: Phase_1
    displayName: Build
    cancelTimeoutInMinutes: 0
    pool:
      name: Azure Pipelines
      vmImage: macOS-11
    steps:
      - checkout: self
        clean: true
        submodules: recursive
        lfs: true
      - task: PowerShell@2
        displayName: Install build scripts
        continueOnError: true
        inputs:
          targetType: inline
          scriptName: ''
          script: >-
            Set-Location -Path '$(Agent.HomeDirectory)'

            Invoke-WebRequest -Uri
            'https://appcenterbuildassets.azureedge.net/buildscripts/appcenter-build-assets-latest.zip'
            -OutFile 'appcenter-build-assets-latest.zip'

            if (Test-Path ./scripts) { Remove-Item -Path ./scripts -Force
            -Recurse }

            New-Item -ItemType directory -Path 'scripts' | Out-Null

            unzip -q -d 'scripts' 'appcenter-build-assets-latest.zip'

            Invoke-Expression 'bash ./scripts/init.sh'
          failOnStderr: true
      - task: ShellScript@2
        displayName: Tag build
        inputs:
          scriptPath: $(Agent.HomeDirectory)/scripts/emit-tags.sh
          args: $(sonoma.tags)
      - task: CmdLine@1
        displayName: Set Mono version and Xcode path
        inputs:
          filename: /bin/bash
          arguments: >-
            -c "echo '##vso[task.setvariable
            variable=DYLD_FALLBACK_LIBRARY_PATH;]'/Library/Frameworks/Mono.framework/Versions/6_12_12/lib:/lib:/usr/lib:$DYLD_LIBRARY_FALLBACK_PATH;echo
            '##vso[task.setvariable
            variable=PKG_CONFIG_PATH;]'/Library/Frameworks/Mono.framework/Versions/6_12_12/lib/pkgconfig:/Library/Frameworks/Mono.framework/Versions/6_12_12/share/pkgconfig:$PKG_CONFIG_PATH;echo
            '##vso[task.setvariable
            variable=PATH;]'/Library/Frameworks/Mono.framework/Versions/6_12_12/bin:$PATH;echo
            '##vso[task.setvariable
            variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_13.2.1.app;sudo
            xcode-select --switch
            /Applications/Xcode_13.2.1.app/Contents/Developer"
      - task: ShellScript@2
        displayName: Set Xamarin SDK Bundle
        inputs:
          scriptPath: $(Agent.HomeDirectory)/scripts/select-xamarin-sdk.sh
          args: 61212
          disableAutoCwd: true
          cwd: $(System.DefaultWorkingDirectory)
      - task: UseDotNet@2
        displayName: Switch .NET Core version
        inputs:
          version: 5.0.100
      - task: InstallAppleCertificate@2
        displayName: Install Apple certificate
        inputs:
          certSecureFile: $(P12SecureFileId)
          certPwd: $(P12Password)
      - task: InstallAppleProvisioningProfile@0
        displayName: Install Apple provisioning profile
        inputs:
          provProfileSecureFile: $(MobileProvisionSecureFileId)
      - task: CmdLine@1
        displayName: Restore Nuget
        inputs:
          filename: /bin/bash
          arguments: '-c "nuget restore ''XamariniOS.sln'' -DisableParallelProcessing"'
      - task: CmdLine@1
        displayName: Set Bundle version
        inputs:
          filename: /usr/bin/find
          arguments: >-
            . -regex ".*/Info.*.plist" -exec /usr/libexec/PlistBuddy -c "Set
            :CFBundleVersion $(Build.BuildNumber)" {} ;
      - task: XamariniOS@1
        displayName: Build Xamarin.iOS solution
        inputs:
          solution: XamariniOS.sln
          runNugetRestore: false
          packageApp: true
          forSimulator: false
          args: '/t:Rebuild '
          signMethod: id
          iosSigningIdentity: $(APPLE_CERTIFICATE_SIGNING_IDENTITY)
          provProfileUuid: bdfb7ea5-ff35-4d1d-b680-f9c65fdf6eb3
          buildTool: msbuild
      - task: CmdLine@1
        displayName: Making Output Folder
        inputs:
          filename: /bin/mkdir
          arguments: $(build.artifactstagingdirectory)/build
      - task: CmdLine@1
        displayName: Copy build files to staging
        inputs:
          filename: /bin/bash
          arguments: >-
            -c "/usr/bin/find . ! -path '*/obj/*' -type f -name '*.ipa' -print0
            | xargs -0 stat -f \"%m %N\" | sort -rn | head -1 | cut -f2- -d\" \"
            | xargs -L 1 -I{} cp -R -v {}
            $(build.artifactstagingdirectory)/build"
      - task: CmdLine@1
        displayName: Making Output Folder
        inputs:
          filename: /bin/mkdir
          arguments: $(build.artifactstagingdirectory)/symbols
      - task: CmdLine@1
        displayName: Copy symbol files to staging
        inputs:
          filename: /usr/bin/find
          arguments: ' . -type d -name "*.dSYM" -exec cp -v -R {} $(build.artifactstagingdirectory)/symbols  ;'
      - task: PublishBuildArtifacts@1
        displayName: Publish build
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)/build
          ArtifactName: build
      - task: PublishBuildArtifacts@1
        displayName: Publish symbols
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)/symbols
          ArtifactName: symbols
